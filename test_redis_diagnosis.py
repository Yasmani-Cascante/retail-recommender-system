#!/usr/bin/env python3
"""
Test de diagn√≥stico Redis para debugging
"""
import os
import sys
sys.path.append('src')

print("üîç === DIAGN√ìSTICO REDIS COMPLETO ===\n")

# 1. Cargar .env expl√≠citamente
print("1Ô∏è‚É£ Cargando archivo .env...")
try:
    from dotenv import load_dotenv
    result = load_dotenv()
    print(f"‚úÖ load_dotenv() result: {result}")
    print(f"‚úÖ Archivo .env {'encontrado y cargado' if result else 'no encontrado o ya cargado'}")
except Exception as e:
    print(f"‚ùå Error cargando .env: {e}")

# 2. Verificar variables cr√≠ticas
print("\n2Ô∏è‚É£ Verificando variables de entorno...")
critical_vars = ['USE_REDIS_CACHE', 'REDIS_HOST', 'REDIS_PORT', 'REDIS_SSL', 'REDIS_PASSWORD', 'REDIS_USERNAME']
for var in critical_vars:
    value = os.getenv(var, 'NOT_SET')
    if 'PASSWORD' in var and value != 'NOT_SET':
        display_value = '*' * len(value)
    else:
        display_value = value
    status = '‚úÖ' if value != 'NOT_SET' else '‚ùå'
    print(f"  {status} {var}: {display_value}")

# 3. Probar el validador directamente
print("\n3Ô∏è‚É£ Probando RedisConfigValidator...")
try:
    from src.api.core.redis_config_fix import RedisConfigValidator
    print("‚úÖ Import RedisConfigValidator exitoso")
    
    config = RedisConfigValidator.validate_and_fix_config()
    print("‚úÖ validate_and_fix_config() exitoso")
    
    print(f"üìã Configuraci√≥n validada:")
    for key, value in config.items():
        if 'password' in key.lower() and value:
            display_value = '*' * len(str(value))
        else:
            display_value = value
        print(f"  {key}: {display_value}")
    
    if config.get('use_redis_cache'):
        print("\n4Ô∏è‚É£ Configuraci√≥n Redis v√°lida - creando cliente...")
        try:
            from src.api.core.redis_config_fix import PatchedRedisClient
            print("‚úÖ Import PatchedRedisClient exitoso")
            
            client = PatchedRedisClient(use_validated_config=True)
            print("‚úÖ Cliente Redis creado exitosamente")
            print(f"‚úÖ Cliente tipo: {type(client).__name__}")
            print(f"‚úÖ SSL habilitado: {getattr(client, 'ssl', 'Unknown')}")
            print(f"‚úÖ Host: {getattr(client, 'host', 'Unknown')}")
            print(f"‚úÖ Puerto: {getattr(client, 'port', 'Unknown')}")
            
        except Exception as e:
            print(f"‚ùå Error creando cliente: {e}")
    else:
        print("‚ö†Ô∏è Redis cache desactivado por configuraci√≥n")
        
except Exception as e:
    print(f"‚ùå Error en validaci√≥n: {e}")
    import traceback
    traceback.print_exc()

# 5. Test de conexi√≥n (si llegamos hasta aqu√≠)
print("\n5Ô∏è‚É£ Test de conexi√≥n (si el cliente fue creado)...")
try:
    if 'client' in locals():
        print("üîó Intentando conexi√≥n...")
        # No podemos hacer await aqu√≠, solo reportamos que el cliente fue creado
        print("‚úÖ Cliente listo para conexi√≥n as√≠ncrona")
        print("üìù Para test de conexi√≥n completo, usar contexto async")
    else:
        print("‚ö†Ô∏è Cliente no creado, saltando test de conexi√≥n")
except Exception as e:
    print(f"‚ùå Error en test de conexi√≥n: {e}")

print("\nüèÅ === DIAGN√ìSTICO COMPLETADO ===")
