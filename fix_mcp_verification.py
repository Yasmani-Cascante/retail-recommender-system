# fix_mcp_verification.py
"""
Script para verificar que todas las correcciones MCP est√°n funcionando correctamente.
Ejecutar despu√©s de aplicar las correcciones para validar el sistema.
"""

import asyncio
import os
import sys
import logging
from pathlib import Path

# A√±adir el directorio ra√≠z al PATH
root_dir = Path(__file__).resolve().parent
sys.path.append(str(root_dir))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def verify_redis_connection():
    """Verificar conexi√≥n a Redis"""
    logger.info("üîç Verificando conexi√≥n a Redis...")
    
    try:
        from src.api.core.cache import get_redis_client
        
        redis_client = get_redis_client()
        if not redis_client or not redis_client.client:
            logger.error("‚ùå Redis no configurado o no disponible")
            return False
        
        # Test b√°sico de conectividad
        test_key = "mcp_test_connection"
        await redis_client.set(test_key, {"test": "success"}, expiration=60)
        result = await redis_client.get(test_key)
        await redis_client.delete(test_key)
        
        if result and result.get("test") == "success":
            logger.info("‚úÖ Redis conectado y funcionando correctamente")
            return True
        else:
            logger.error("‚ùå Redis conectado pero fall√≥ el test de escritura/lectura")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando Redis: {e}")
        return False

async def verify_market_manager():
    """Verificar MarketContextManager"""
    logger.info("üîç Verificando MarketContextManager...")
    
    try:
        from src.api.mcp.adapters.market_manager import MarketContextManager
        
        manager = MarketContextManager()
        await manager.initialize()
        
        # Test obtener mercados soportados
        markets = await manager.get_supported_markets()
        
        if markets and "default" in markets:
            logger.info(f"‚úÖ MarketContextManager funcionando - {len(markets)} mercados disponibles")
            return True
        else:
            logger.error("‚ùå MarketContextManager: no se pudieron obtener mercados")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando MarketContextManager: {e}")
        return False

async def verify_market_cache():
    """Verificar MarketAwareProductCache"""
    logger.info("üîç Verificando MarketAwareProductCache...")
    
    try:
        from src.cache.market_aware.market_cache import MarketAwareProductCache
        
        cache = MarketAwareProductCache()
        
        # Test b√°sico de cache
        test_product = {
            "id": "test_123",
            "title": "Test Product",
            "price": 99.99
        }
        
        # Guardar en cache
        saved = await cache.set_product("test_123", test_product, "US")
        
        if saved:
            # Recuperar de cache
            retrieved = await cache.get_product("test_123", "US")
            
            if retrieved and retrieved.get("id") == "test_123":
                logger.info("‚úÖ MarketAwareProductCache funcionando correctamente")
                # Limpiar test
                await cache.invalidate_product("test_123", "US")
                return True
            else:
                logger.error("‚ùå MarketAwareProductCache: error recuperando datos")
                return False
        else:
            logger.error("‚ùå MarketAwareProductCache: error guardando datos")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando MarketAwareProductCache: {e}")
        return False

async def verify_mcp_recommender():
    """Verificar MCPAwareHybridRecommender"""
    logger.info("üîç Verificando MCPAwareHybridRecommender...")
    
    try:
        from src.recommenders.mcp_aware_hybrid import MCPAwareHybridRecommender
        
        # Crear mock base recommender
        class MockBaseRecommender:
            async def get_recommendations(self, user_id, product_id=None, n_recommendations=5):
                return [
                    {"id": "prod_1", "title": "Test Product 1", "score": 0.9, "price": 29.99},
                    {"id": "prod_2", "title": "Test Product 2", "score": 0.8, "price": 39.99}
                ]
            
            async def record_user_event(self, user_id, event_type, product_id=None, **kwargs):
                return {"status": "success"}
        
        base_recommender = MockBaseRecommender()
        mcp_recommender = MCPAwareHybridRecommender(base_recommender)
        
        # Test request b√°sico
        test_request = {
            "user_id": "test_user",
            "market_id": "US",
            "n_recommendations": 3,
            "include_conversation_response": False
        }
        
        response = await mcp_recommender.get_recommendations(test_request)
        
        if response and "recommendations" in response and len(response["recommendations"]) > 0:
            logger.info("‚úÖ MCPAwareHybridRecommender funcionando correctamente")
            return True
        else:
            logger.error("‚ùå MCPAwareHybridRecommender: respuesta inv√°lida")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando MCPAwareHybridRecommender: {e}")
        return False

async def verify_environment_config():
    """Verificar configuraci√≥n de entorno"""
    logger.info("üîç Verificando configuraci√≥n de entorno...")
    
    required_vars = [
        "REDIS_HOST",
        "REDIS_PORT", 
        "USE_REDIS_CACHE",
        "MCP_ENABLED"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"‚ùå Variables de entorno faltantes: {missing_vars}")
        return False
    else:
        logger.info("‚úÖ Configuraci√≥n de entorno correcta")
        return True

async def verify_imports():
    """Verificar que todos los imports funcionan"""
    logger.info("üîç Verificando imports...")
    
    import_tests = [
        ("src.api.core.cache", "get_redis_client"),
        ("src.api.mcp.adapters.market_manager", "MarketContextManager"),
        ("src.cache.market_aware.market_cache", "MarketAwareProductCache"),
        ("src.recommenders.mcp_aware_hybrid", "MCPAwareHybridRecommender"),
        ("src.api.mcp.models.mcp_models", "ConversationContext")
    ]
    
    failed_imports = []
    
    for module_name, class_name in import_tests:
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            logger.info(f"  ‚úÖ {module_name}.{class_name}")
        except Exception as e:
            failed_imports.append((module_name, class_name, str(e)))
            logger.error(f"  ‚ùå {module_name}.{class_name}: {e}")
    
    if failed_imports:
        logger.error(f"‚ùå {len(failed_imports)} imports fallaron")
        return False
    else:
        logger.info("‚úÖ Todos los imports funcionan correctamente")
        return True

async def main():
    """Ejecutar todas las verificaciones"""
    logger.info("üöÄ Iniciando verificaci√≥n de correcciones MCP...")
    
    tests = [
        ("Configuraci√≥n de entorno", verify_environment_config),
        ("Imports de m√≥dulos", verify_imports),
        ("Conexi√≥n Redis", verify_redis_connection),
        ("MarketContextManager", verify_market_manager),
        ("MarketAwareProductCache", verify_market_cache),
        ("MCPAwareHybridRecommender", verify_mcp_recommender)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã Ejecutando: {test_name}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå Error en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen de resultados
    logger.info("\n" + "="*50)
    logger.info("üìä RESUMEN DE VERIFICACIONES")
    logger.info("="*50)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        logger.info(f"{status} {test_name}")
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info(f"\nüìà Total: {passed} pasaron, {failed} fallaron")
    
    if failed == 0:
        logger.info("üéâ ¬°Todas las correcciones verificadas exitosamente!")
        logger.info("üöÄ El sistema est√° listo para ejecutar MCP Fase 2")
        return True
    else:
        logger.error("‚ö†Ô∏è Algunas verificaciones fallaron - revisar errores arriba")
        return False

if __name__ == "__main__":
    # Cargar variables de entorno
    from dotenv import load_dotenv
    load_dotenv()
    
    success = asyncio.run(main())
    
    if success:
        print("\nüéØ PR√ìXIMOS PASOS:")
        print("1. Ejecutar el sistema: python src/api/run.py")
        print("2. Verificar health check: http://localhost:8000/health")
        print("3. Probar endpoints MCP: http://localhost:8000/docs")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è CORRECCIONES REQUERIDAS:")
        print("1. Revisar los errores mostrados arriba")
        print("2. Aplicar las correcciones necesarias")
        print("3. Re-ejecutar este script")
        sys.exit(1)
