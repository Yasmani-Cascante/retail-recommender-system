#!/usr/bin/env python3
"""
Script de Validaci√≥n de Configuraci√≥n Claude
===========================================

Valida que la configuraci√≥n centralizada Claude est√© funcionando correctamente
despu√©s de las correcciones aplicadas.
"""

import sys
import os
from dotenv import load_dotenv

# üöÄ CORRECCI√ìN: Cargar variables de entorno desde .env
load_dotenv()

sys.path.append('src')

def validate_claude_configuration():
    """Valida la configuraci√≥n Claude completa"""
    
    print("üîß VALIDACI√ìN DE CONFIGURACI√ìN CLAUDE CENTRALIZADA")
    print("=" * 60)
    
    try:
        # Verificar que .env se carg√≥ correctamente
        api_key_env = os.getenv('ANTHROPIC_API_KEY')
        print(f"üîë API Key desde entorno: {'Configurada' if api_key_env else 'NO CONFIGURADA'}")
        
        # Importar servicio de configuraci√≥n
        from api.core.claude_config import get_claude_config_service, ClaudeModelTier
        
        print("‚úÖ Importaci√≥n exitosa del servicio Claude")
        
        # Crear instancia del servicio
        claude_service = get_claude_config_service()
        
        print(f"‚úÖ Servicio Claude inicializado")
        print(f"   Model Tier: {claude_service.claude_model_tier.name}")
        print(f"   Model Name: {claude_service.claude_model_tier.value}")
        print(f"   Region: {claude_service.claude_region}")
        
        # Validar configuraci√≥n
        validation_result = claude_service.validate_configuration()
        
        print(f"\nüìä RESULTADO DE VALIDACI√ìN:")
        print(f"   Estado: {'‚úÖ V√ÅLIDA' if validation_result['valid'] else '‚ùå INV√ÅLIDA'}")
        
        if validation_result.get('issues'):
            print(f"   Issues: {len(validation_result['issues'])}")
            for issue in validation_result['issues']:
                print(f"     - {issue}")
        
        if validation_result.get('warnings'):
            print(f"   Warnings: {len(validation_result['warnings'])}")
            for warning in validation_result['warnings']:
                print(f"     - {warning}")
        
        # Mostrar m√©tricas
        metrics = claude_service.get_metrics()
        print(f"\nüìà M√âTRICAS DE CONFIGURACI√ìN:")
        for key, value in metrics.items():
            print(f"   {key}: {value}")
        
        # Probar resoluci√≥n de diferentes tiers
        print(f"\nüß™ PRUEBA DE RESOLUCI√ìN DE TIERS:")
        test_tiers = ["HAIKU", "SONNET", "OPUS", "invalid"]
        
        for tier_name in test_tiers:
            try:
                tier = ClaudeModelTier.from_string(tier_name)
                print(f"   ‚úÖ {tier_name} -> {tier.value}")
            except ValueError as e:
                print(f"   ‚ùå {tier_name} -> {e}")
        
        # Probar configuraci√≥n de modelo
        print(f"\n‚öôÔ∏è CONFIGURACI√ìN DE MODELO:")
        config = claude_service.get_model_config()
        print(f"   Model: {config.model_name}")
        print(f"   Max Tokens: {config.max_tokens}")
        print(f"   Temperature: {config.temperature}")
        print(f"   Cost per 1K tokens: ${config.cost_per_1k_tokens}")
        
        # Resultado final
        if validation_result['valid']:
            print(f"\nüéâ CONFIGURACI√ìN CLAUDE COMPLETAMENTE V√ÅLIDA")
            print(f"‚úÖ El warning 'Invalid CLAUDE_MODEL_TIER: SONNET' ha sido resuelto")
            return True
        else:
            print(f"\n‚ö†Ô∏è CONFIGURACI√ìN REQUIERE ATENCI√ìN")
            return False
        
    except Exception as e:
        print(f"‚ùå ERROR DURANTE VALIDACI√ìN: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîç VALIDADOR DE CONFIGURACI√ìN CLAUDE")
    print("Verificando correcci√≥n del warning 'Invalid CLAUDE_MODEL_TIER: SONNET'\n")
    
    success = validate_claude_configuration()
    
    if success:
        print("\n" + "="*60)
        print("‚úÖ VALIDACI√ìN EXITOSA - CONFIGURACI√ìN CLAUDE OPERATIVA")
        print("üöÄ El sistema est√° listo para usar la configuraci√≥n centralizada")
    else:
        print("\n" + "="*60)
        print("‚ùå VALIDACI√ìN FALL√ì - REVISAR CONFIGURACI√ìN")
        sys.exit(1)
