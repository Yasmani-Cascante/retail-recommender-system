#!/usr/bin/env python3
"""
Script para verificar la conexi√≥n a Redis Labs.

Este script verifica la conectividad directa con Redis Labs utilizando
las mismas credenciales que usa el sistema de recomendaciones.
"""

import os
import asyncio
import json
import time
import ssl as ssl_lib
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv('.env.secrets')

async def test_redis_connection():
    """Prueba la conexi√≥n a Redis Labs."""
    
    print("üîç Verificando conexi√≥n a Redis Labs...")
    print("=" * 60)
    
    # Obtener credenciales de Redis desde variables de entorno
    redis_host = os.getenv("REDIS_HOST", "localhost")
    redis_port = int(os.getenv("REDIS_PORT", 6379))
    redis_password = os.getenv("REDIS_PASSWORD", "")
    redis_username = os.getenv("REDIS_USERNAME", "")
    redis_ssl = os.getenv("REDIS_SSL", "false").lower() == "true"
    
    print(f"üì° Configuraci√≥n de Redis:")
    print(f"   Host: {redis_host}")
    print(f"   Port: {redis_port}")
    print(f"   Username: {redis_username}")
    print(f"   Password: {'*' * len(redis_password) if redis_password else 'No configurada'}")
    print(f"   SSL: {redis_ssl}")
    print()
    
    # Intentar importar redis
    try:
        import redis.asyncio as redis
        print("‚úÖ Librer√≠a redis importada correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando redis: {e}")
        print("üí° Instala redis con: pip install redis>=4.6.0")
        return False
    
    # Construir la URL de conexi√≥n
    if redis_username and redis_password:
        auth_part = f"{redis_username}:{redis_password}@"
    elif redis_password:
        auth_part = f":{redis_password}@"
    else:
        auth_part = ""
        
    redis_url = f"redis{'s' if redis_ssl else ''}://{auth_part}{redis_host}:{redis_port}/0"
    print(f"üîó URL de conexi√≥n: {redis_url.replace(redis_password, '*' * len(redis_password) if redis_password else '')}")
    print()
    
    # Intentar conexi√≥n
    client = None
    try:
        print("üîÑ Intentando conectar...")
        
        # Configuraci√≥n espec√≠fica para SSL (necesaria para Redis Labs)
        connection_options = {
            "decode_responses": True,
            "health_check_interval": 30,
            "socket_connect_timeout": 10,
            "socket_timeout": 10
        }
        
        # Agregar SSL solo si est√° habilitado
        if redis_ssl:
            connection_options["ssl"] = True
            connection_options["ssl_check_hostname"] = False
            connection_options["ssl_cert_reqs"] = ssl_lib.CERT_NONE
        
        client = await redis.from_url(redis_url, **connection_options)
        
        # Probar ping
        print("üì° Enviando PING...")
        ping_result = await client.ping()
        print(f"‚úÖ PING exitoso: {ping_result}")
        
        # Probar operaciones b√°sicas
        print("\nüß™ Probando operaciones b√°sicas...")
        
        # Test SET
        test_key = "test:connection:redis_labs"
        test_value = f"test_value_{int(time.time())}"
        
        print(f"   SET {test_key} = {test_value}")
        await client.set(test_key, test_value, ex=60)  # TTL de 60 segundos
        
        # Test GET
        print(f"   GET {test_key}")
        retrieved_value = await client.get(test_key)
        print(f"   Valor recuperado: {retrieved_value}")
        
        if retrieved_value == test_value:
            print("   ‚úÖ Operaci√≥n SET/GET exitosa")
        else:
            print(f"   ‚ùå Error: Valor esperado '{test_value}', obtenido '{retrieved_value}'")
        
        # Test TTL
        print(f"   TTL {test_key}")
        ttl = await client.ttl(test_key)
        print(f"   TTL restante: {ttl} segundos")
        
        # Test DELETE
        print(f"   DEL {test_key}")
        deleted_count = await client.delete(test_key)
        print(f"   Claves eliminadas: {deleted_count}")
        
        # Obtener informaci√≥n del servidor
        print("\nüìä Informaci√≥n del servidor Redis:")
        try:
            info = await client.info()
            print(f"   Versi√≥n Redis: {info.get('redis_version', 'N/A')}")
            print(f"   Memoria usada: {info.get('used_memory_human', 'N/A')}")
            print(f"   Uptime: {info.get('uptime_in_days', 'N/A')} d√≠as")
            print(f"   Clientes conectados: {info.get('connected_clients', 'N/A')}")
            print(f"   Total comandos procesados: {info.get('total_commands_processed', 'N/A')}")
            print(f"   Keyspace hits: {info.get('keyspace_hits', 'N/A')}")
            print(f"   Keyspace misses: {info.get('keyspace_misses', 'N/A')}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è No se pudo obtener informaci√≥n del servidor: {e}")
        
        print("\n‚úÖ Todas las pruebas de Redis Labs exitosas!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error conectando a Redis Labs: {e}")
        print(f"üîç Tipo de error: {type(e).__name__}")
        
        # Diagn√≥sticos adicionales
        print("\nüîß Diagn√≥sticos:")
        
        # Verificar si es un error de SSL
        if "ssl" in str(e).lower() or "tls" in str(e).lower():
            print("   üìù Posible problema de SSL/TLS:")
            print("      - Verifica que REDIS_SSL=true est√© configurado")
            print("      - Redis Labs requiere conexi√≥n SSL")
            print("      - Verifica que el puerto sea el correcto para SSL")
        
        # Verificar si es un error de autenticaci√≥n
        if "auth" in str(e).lower() or "password" in str(e).lower() or "username" in str(e).lower():
            print("   üîê Posible problema de autenticaci√≥n:")
            print("      - Verifica REDIS_USERNAME y REDIS_PASSWORD")
            print("      - Aseg√∫rate de que las credenciales sean correctas")
        
        # Verificar si es un error de conectividad
        if "connection" in str(e).lower() or "timeout" in str(e).lower() or "refused" in str(e).lower():
            print("   üåê Posible problema de conectividad:")
            print("      - Verifica REDIS_HOST y REDIS_PORT")
            print("      - Verifica que el firewall permita conexiones salientes")
            print("      - Verifica que Redis Labs est√© funcionando")
        
        return False
        
    finally:
        # Cerrar conexi√≥n
        if client:
            try:
                await client.close()
                print("\nüîå Conexi√≥n cerrada correctamente")
            except:
                pass

async def test_environment_variables():
    """Verifica que todas las variables de entorno est√©n configuradas."""
    
    print("\nüîç Verificando variables de entorno...")
    print("=" * 60)
    
    required_vars = [
        "REDIS_HOST",
        "REDIS_PORT", 
        "REDIS_PASSWORD",
        "REDIS_USERNAME",
        "REDIS_SSL"
    ]
    
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            if var in ["REDIS_PASSWORD"]:
                print(f"‚úÖ {var}: {'*' * len(value)}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: No configurada")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è Variables faltantes: {', '.join(missing_vars)}")
        print("üí° Verifica el archivo .env.secrets")
        return False
    else:
        print("\n‚úÖ Todas las variables de Redis est√°n configuradas")
        return True

def print_recommendations():
    """Imprime recomendaciones para solucionar problemas."""
    
    print("\nüí° Recomendaciones para solucionar problemas:")
    print("=" * 60)
    
    print("1. üîß Verificar credenciales de Redis Labs:")
    print("   - Accede a tu panel de Redis Labs")
    print("   - Verifica que el host, puerto, usuario y contrase√±a sean correctos")
    print("   - Aseg√∫rate de que la instancia est√© activa")
    
    print("\n2. üîê Configuraci√≥n de SSL:")
    print("   - Redis Labs requiere SSL/TLS")
    print("   - Aseg√∫rate de que REDIS_SSL=true")
    print("   - Usa el puerto SSL proporcionado por Redis Labs")
    
    print("\n3. üåê Configuraci√≥n de red:")
    print("   - Verifica que tu IP est√© en la lista blanca de Redis Labs")
    print("   - Verifica que no haya firewalls bloqueando la conexi√≥n")
    print("   - Prueba la conectividad desde otra ubicaci√≥n")
    
    print("\n4. üìÅ Configuraci√≥n de variables:")
    print("   - Verifica que el archivo .env.secrets est√© en el directorio correcto")
    print("   - Aseg√∫rate de que no haya espacios extra en las variables")
    print("   - Verifica que no haya caracteres especiales mal codificados")

async def main():
    """Funci√≥n principal."""
    
    print("üöÄ Script de verificaci√≥n de Redis Labs")
    print("=" * 60)
    
    # Verificar variables de entorno
    env_ok = await test_environment_variables()
    
    if not env_ok:
        print_recommendations()
        return
    
    # Probar conexi√≥n
    connection_ok = await test_redis_connection()
    
    if not connection_ok:
        print_recommendations()
    else:
        print("\nüéâ ¬°Conexi√≥n a Redis Labs exitosa!")
        print("El sistema de cach√© deber√≠a funcionar correctamente.")

if __name__ == "__main__":
    # Ejecutar el script
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Script interrumpido por el usuario")
    except Exception as e:
        print(f"\n\n‚ùå Error ejecutando el script: {e}")
        import traceback
        traceback.print_exc()
