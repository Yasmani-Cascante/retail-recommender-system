#!/usr/bin/env python3
"""
Script de verificaci√≥n de la correcci√≥n aplicada al HybridRecommender.

Este script verifica que la correcci√≥n cr√≠tica se aplic√≥ correctamente
y valida la l√≥gica del recomendador h√≠brido.
"""

import sys
import os

def verify_hybrid_recommender_fix():
    """Verifica que la correcci√≥n se aplic√≥ correctamente."""
    
    print("üîç Verificando correcci√≥n en HybridRecommender...")
    
    # Leer el archivo corregido
    file_path = "src/api/core/hybrid_recommender.py"
    
    if not os.path.exists(file_path):
        print(f"‚ùå Error: No se encontr√≥ el archivo {file_path}")
        return False
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificaciones cr√≠ticas
    checks = [
        {
            "name": "Validaci√≥n de content_weight en constructor",
            "pattern": "if content_weight < 0 or content_weight > 1:",
            "found": "if content_weight < 0 or content_weight > 1:" in content
        },
        {
            "name": "Variable should_use_retail_api",
            "pattern": "should_use_retail_api = not product_id or self.content_weight < 1.0",
            "found": "should_use_retail_api = not product_id or self.content_weight < 1.0" in content
        },
        {
            "name": "Logging de diagn√≥stico",
            "pattern": "using_retail_api={should_use_retail_api}",
            "found": "using_retail_api={should_use_retail_api}" in content
        },
        {
            "name": "Comentario de correcci√≥n",
            "pattern": "CORRECCI√ìN: Para recomendaciones de usuario",
            "found": "CORRECCI√ìN: Para recomendaciones de usuario" in content
        },
        {
            "name": "Emojis en logging",
            "pattern": "‚úÖ Obtenidas",
            "found": "‚úÖ Obtenidas" in content
        }
    ]
    
    all_passed = True
    
    for check in checks:
        if check["found"]:
            print(f"‚úÖ {check['name']}: CORRECTO")
        else:
            print(f"‚ùå {check['name']}: FALTA")
            all_passed = False
    
    # Verificar que la l√≠nea problem√°tica anterior fue comentada/removida
    old_problem_line = "if self.content_weight < 1.0:"
    if old_problem_line in content:
        # Verificar si est√° comentada
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if old_problem_line in line and not line.strip().startswith('#'):
                print(f"‚ùå L√≠nea problem√°tica a√∫n activa en l√≠nea {i+1}: {line.strip()}")
                all_passed = False
                break
        else:
            print("‚úÖ L√≠nea problem√°tica anterior correctamente comentada/removida")
    else:
        print("‚úÖ L√≠nea problem√°tica anterior no encontrada (correcto)")
    
    # Verificar la nueva l√≥gica
    new_logic = "not product_id or self.content_weight < 1.0"
    if new_logic in content:
        print("‚úÖ Nueva l√≥gica corregida implementada")
    else:
        print("‚ùå Nueva l√≥gica corregida NO encontrada")
        all_passed = False
    
    print("\n" + "="*60)
    
    if all_passed:
        print("üéâ CORRECCI√ìN APLICADA EXITOSAMENTE")
        print("\nüìã Resumen de cambios:")
        print("  ‚Ä¢ ‚úÖ Retail API se usa SIEMPRE para recomendaciones de usuario")
        print("  ‚Ä¢ ‚úÖ content_weight se aplica solo para recomendaciones de producto")
        print("  ‚Ä¢ ‚úÖ Validaci√≥n de par√°metros a√±adida")
        print("  ‚Ä¢ ‚úÖ Logging mejorado para diagn√≥stico")
        print("  ‚Ä¢ ‚úÖ Comentarios explicativos a√±adidos")
        
        print("\nüöÄ Pr√≥ximos pasos:")
        print("  1. Redesplegar la versi√≥n unificada: ./deploy_unified_redis.ps1")
        print("  2. Probar el endpoint: /v1/recommendations/user/8816287056181")
        print("  3. Verificar que ahora incluye recomendaciones de retail_api")
        
        return True
    else:
        print("‚ùå CORRECCI√ìN NO APLICADA COMPLETAMENTE")
        print("Revisa los errores arriba y aplica las correcciones faltantes.")
        return False

if __name__ == "__main__":
    # Cambiar al directorio del proyecto
    if os.path.basename(os.getcwd()) != "retail-recommender-system":
        script_dir = os.path.dirname(os.path.abspath(__file__))
        project_dir = os.path.dirname(script_dir)
        if os.path.basename(project_dir) == "retail-recommender-system":
            os.chdir(project_dir)
            print(f"üìÅ Cambiado al directorio del proyecto: {project_dir}")
    
    success = verify_hybrid_recommender_fix()
    sys.exit(0 if success else 1)
