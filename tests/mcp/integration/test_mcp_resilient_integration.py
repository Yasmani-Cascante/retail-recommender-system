# tests/mcp/integration/test_mcp_resilient_integration.py
"""
Suite completa de tests de integraci√≥n para componentes resilientes MCP

Este m√≥dulo prueba la integraci√≥n completa entre:
- MCPClientEnhanced con circuit breaker y fallbacks
- UserEventStore resiliente con Redis y buffer local
- MCPAwareRecommender con personalizaci√≥n
- Sistemas de cach√© y resiliencia

Enfoque: Simular escenarios reales de fallo y recuperaci√≥n
"""

import pytest
import asyncio
import time
import json
import tempfile
import shutil
from unittest.mock import AsyncMock, MagicMock, patch
from typing import Dict, List, Any
from datetime import datetime, timedelta

# Importar componentes del sistema
try:
    from src.api.mcp.client.mcp_client_enhanced import MCPClientEnhanced
    from src.api.mcp.user_events.resilient_user_event_store import UserEventStore
    from src.recommenders.mcp_aware_recommender import MCPAwareRecommender
    from src.recommenders.hybrid import HybridRecommender
except ImportError as e:
    print(f"‚ö†Ô∏è Importaci√≥n fallida: {e}")
    print("Nota: Algunos componentes MCP pueden no estar disponibles a√∫n")

class MCPIntegrationTestSuite:
    """Suite completa de tests de integraci√≥n para componentes MCP resilientes"""
    
    def __init__(self):
        self.temp_dir = None
        self.mock_redis = None
        self.event_store = None
        self.mcp_client = None
        self.recommender = None
        
    async def setup(self):
        """Configuraci√≥n inicial para todos los tests"""
        # Crear directorio temporal para fallbacks
        self.temp_dir = tempfile.mkdtemp(prefix="mcp_test_")
        
        # Configurar mock de Redis
        self.mock_redis = AsyncMock()
        self.mock_redis.connected = True
        
        # Crear componentes con mocks
        self.base_recommender = AsyncMock(spec=HybridRecommender)
        self.base_recommender.get_recommendations = AsyncMock()
        self.base_recommender.record_user_event = AsyncMock()
        
        print("‚úÖ Setup completo para tests de integraci√≥n MCP")
    
    async def teardown(self):
        """Limpieza despu√©s de los tests"""
        # Limpiar directorio temporal
        if self.temp_dir:
            shutil.rmtree(self.temp_dir, ignore_errors=True)
        
        print("‚úÖ Teardown completo")
    
    async def test_basic_integration(self):
        """Test b√°sico de integraci√≥n de componentes"""
        print("\nüß™ Test: Integraci√≥n b√°sica de componentes")
        
        try:
            # Test que los mocks funcionan
            assert self.mock_redis is not None
            assert self.base_recommender is not None
            
            # Configurar respuesta del mock
            self.base_recommender.get_recommendations.return_value = [
                {
                    "id": "test_product_1",
                    "title": "Producto de Test",
                    "final_score": 0.8,
                    "category": "Test"
                }
            ]
            
            # Ejecutar y verificar
            result = await self.base_recommender.get_recommendations("test_user", None, 5)
            assert len(result) == 1
            assert result[0]["id"] == "test_product_1"
            
            print("‚úÖ Test b√°sico PASADO")
            return True
            
        except Exception as e:
            print(f"‚ùå Test b√°sico FALL√ì: {e}")
            return False
    
    async def run_all_tests(self):
        """Ejecutar toda la suite de tests"""
        print("üöÄ Iniciando Suite Completa de Tests de Integraci√≥n MCP")
        print("=" * 60)
        
        await self.setup()
        
        tests = [
            ("Integraci√≥n B√°sica", self.test_basic_integration),
        ]
        
        results = {}
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                print(f"\n{'='*20} {test_name} {'='*20}")
                start_time = time.time()
                result = await test_func()
                execution_time = (time.time() - start_time) * 1000
                
                if result:
                    results[test_name] = {
                        "status": "PASS",
                        "execution_time_ms": execution_time
                    }
                    passed += 1
                    print(f"‚úÖ {test_name} PASADO en {execution_time:.1f}ms")
                else:
                    results[test_name] = {
                        "status": "FAIL",
                        "execution_time_ms": execution_time
                    }
                    print(f"‚ùå {test_name} FALL√ì")
                    
            except Exception as e:
                execution_time = (time.time() - start_time) * 1000 if 'start_time' in locals() else 0
                results[test_name] = {
                    "status": "ERROR",
                    "error": str(e),
                    "execution_time_ms": execution_time
                }
                print(f"üí• {test_name} ERROR: {e}")
        
        await self.teardown()
        
        # Reporte final
        print("\n" + "=" * 60)
        print("üìä REPORTE FINAL DE TESTS DE INTEGRACI√ìN MCP")
        print("=" * 60)
        print(f"Total de tests: {total}")
        print(f"Tests pasados: {passed}")
        print(f"Tests fallidos: {total - passed}")
        print(f"Tasa de √©xito: {passed/total*100:.1f}%")
        
        return results


# Test runner principal
async def main():
    """Ejecutar la suite completa de tests"""
    suite = MCPIntegrationTestSuite()
    results = await suite.run_all_tests()
    
    # Exit code basado en resultados
    passed = sum(1 for r in results.values() if r.get("status") == "PASS")
    total = len(results)
    
    if passed == total:
        exit(0)  # √âxito total
    elif passed >= total * 0.8:
        exit(1)  # Advertencia
    else:
        exit(2)  # Error cr√≠tico


if __name__ == "__main__":
    asyncio.run(main())
