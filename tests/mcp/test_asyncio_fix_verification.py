# tests/mcp/test_asyncio_fix_verification.py
"""
Verificaci√≥n de la correcci√≥n del problema de asyncio event loop

Este script verifica que la correcci√≥n aplicada resuelve el problema
de "asyncio.run() cannot be called from a running event loop"
"""

import asyncio
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

async def verify_asyncio_fix():
    """Verificar que la correcci√≥n de asyncio funciona"""
    print("üîç Verificando correcci√≥n de asyncio event loop...")
    
    try:
        # Importar el validador corregido
        from tests.mcp.quick_validation import QuickMCPValidator
        
        # Crear instancia
        validator = QuickMCPValidator()
        
        # Probar solo los m√©todos que fallaban antes
        print("üß™ Probando test_basic_recommender...")
        basic_result = await validator.test_basic_recommender()
        
        print("üß™ Probando test_mock_integration...")  
        integration_result = await validator.test_mock_integration()
        
        # Verificar resultados
        success = (
            basic_result.get("status") == "success" and
            integration_result.get("status") == "success"
        )
        
        if success:
            print("‚úÖ CORRECCI√ìN EXITOSA!")
            print("‚úÖ Los m√©todos async funcionan correctamente")
            print("‚úÖ No hay conflicto de event loops")
            
            # Verificar que tienen el flag de correcci√≥n
            if (basic_result.get("async_fixed") and 
                integration_result.get("async_fixed")):
                print("‚úÖ Flag async_fixed confirmado")
            
            return True
        else:
            print("‚ùå Correcci√≥n no funcion√≥ completamente")
            print(f"Basic result: {basic_result}")
            print(f"Integration result: {integration_result}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        return False

async def main():
    """Funci√≥n principal"""
    print("üöÄ Verificaci√≥n de Correcci√≥n AsyncIO")
    print("=" * 40)
    
    success = await verify_asyncio_fix()
    
    print("\n" + "=" * 40)
    if success:
        print("üéâ CORRECCI√ìN VERIFICADA EXITOSAMENTE")
        print("üìã Ahora puedes ejecutar:")
        print("   python tests/mcp/quick_validation.py")
        sys.exit(0)
    else:
        print("‚ùå VERIFICACI√ìN FALL√ì - Revisar implementaci√≥n")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
