#!/usr/bin/env python3
"""
Script para verificar y diagnosticar problemas de importaci√≥n en Google Cloud Retail API.
Verifica qu√© clases est√°n disponibles y en qu√© ubicaciones.

Uso:
    python verify_retail_imports.py

Este script:
1. Verifica qu√© versi√≥n de google-cloud-retail est√° instalada
2. Prueba diferentes patrones de importaci√≥n
3. Lista las clases disponibles en cada m√≥dulo
4. Proporciona recomendaciones para corregir problemas
"""

import sys
import logging
from typing import Dict, List, Any

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_package_version():
    """Verifica la versi√≥n del paquete google-cloud-retail instalado."""
    try:
        import google.cloud.retail_v2 as retail
        logger.info(f"‚úÖ Paquete google-cloud-retail importado correctamente")
        
        # Intentar obtener la versi√≥n
        try:
            version = getattr(retail, '__version__', 'No disponible')
            logger.info(f"üì¶ Versi√≥n detectada: {version}")
        except:
            logger.info("üì¶ Versi√≥n no disponible en el m√≥dulo")
            
        return True
    except ImportError as e:
        logger.error(f"‚ùå Error al importar google-cloud-retail: {e}")
        logger.error("üí° Soluci√≥n: pip install google-cloud-retail")
        return False

def test_import_patterns():
    """Prueba diferentes patrones de importaci√≥n para ListUserEventsRequest."""
    patterns = [
        {
            'name': 'Patr√≥n 1: Importaci√≥n directa desde retail_v2',
            'import_code': 'from google.cloud.retail_v2 import ListUserEventsRequest',
            'module': 'google.cloud.retail_v2'
        },
        {
            'name': 'Patr√≥n 2: Importaci√≥n desde types',
            'import_code': 'from google.cloud.retail_v2.types import ListUserEventsRequest',
            'module': 'google.cloud.retail_v2.types'
        },
        {
            'name': 'Patr√≥n 3: Importaci√≥n desde user_event_service',
            'import_code': 'from google.cloud.retail_v2.types.user_event_service import ListUserEventsRequest',
            'module': 'google.cloud.retail_v2.types.user_event_service'
        },
        {
            'name': 'Patr√≥n 4: Importaci√≥n desde servicios',
            'import_code': 'from google.cloud.retail_v2.services.user_event_service import ListUserEventsRequest',
            'module': 'google.cloud.retail_v2.services.user_event_service'
        },
        {
            'name': 'Patr√≥n 5: Importaci√≥n desde servicios.user_event_service.client',
            'import_code': 'from google.cloud.retail_v2.services.user_event_service.client import ListUserEventsRequest',
            'module': 'google.cloud.retail_v2.services.user_event_service.client'
        }
    ]
    
    successful_patterns = []
    failed_patterns = []
    
    for pattern in patterns:
        try:
            logger.info(f"üîç Probando: {pattern['name']}")
            logger.debug(f"   C√≥digo: {pattern['import_code']}")
            
            # Ejecutar la importaci√≥n
            exec(pattern['import_code'])
            logger.info(f"   ‚úÖ √âxito")
            successful_patterns.append(pattern)
            
        except ImportError as e:
            logger.warning(f"   ‚ùå Fallo: {e}")
            failed_patterns.append(pattern)
        except Exception as e:
            logger.error(f"   ‚ö†Ô∏è  Error inesperado: {e}")
            failed_patterns.append(pattern)
    
    return successful_patterns, failed_patterns

def list_available_classes(module_path: str):
    """Lista las clases disponibles en un m√≥dulo espec√≠fico."""
    try:
        logger.info(f"üìã Listando clases en {module_path}:")
        
        # Importar el m√≥dulo din√°micamente
        module = __import__(module_path, fromlist=[''])
        
        # Obtener atributos del m√≥dulo
        attributes = [attr for attr in dir(module) if not attr.startswith('_')]
        
        # Filtrar solo clases que podr√≠an ser relevantes para user events
        relevant_classes = [
            attr for attr in attributes 
            if 'UserEvent' in attr or 'Request' in attr or 'Response' in attr
        ]
        
        if relevant_classes:
            for cls in sorted(relevant_classes):
                logger.info(f"   üìå {cls}")
        else:
            logger.info("   ‚ÑπÔ∏è  No se encontraron clases relevantes")
            
        return relevant_classes
        
    except ImportError as e:
        logger.warning(f"   ‚ùå No se pudo importar {module_path}: {e}")
        return []
    except Exception as e:
        logger.error(f"   ‚ö†Ô∏è  Error listando clases en {module_path}: {e}")
        return []

def check_alternative_approaches():
    """Verifica enfoques alternativos para obtener eventos de usuario."""
    logger.info("üîÑ Verificando enfoques alternativos:")
    
    # Verificar si el cliente UserEventServiceClient funciona
    try:
        from google.cloud.retail_v2 import UserEventServiceClient
        logger.info("   ‚úÖ UserEventServiceClient disponible")
        
        # Verificar m√©todos disponibles
        client_methods = [method for method in dir(UserEventServiceClient) 
                         if not method.startswith('_') and 'user_event' in method.lower()]
        
        if client_methods:
            logger.info("   üìã M√©todos relacionados con user events:")
            for method in sorted(client_methods):
                logger.info(f"      ‚Ä¢ {method}")
        
        return True
        
    except ImportError as e:
        logger.warning(f"   ‚ùå UserEventServiceClient no disponible: {e}")
        return False

def provide_recommendations(successful_patterns: List[Dict], failed_patterns: List[Dict]):
    """Proporciona recomendaciones basadas en los resultados de las pruebas."""
    logger.info("üí° Recomendaciones:")
    
    if successful_patterns:
        logger.info("   ‚úÖ Patrones de importaci√≥n exitosos encontrados:")
        for pattern in successful_patterns:
            logger.info(f"      ‚Ä¢ {pattern['name']}")
            logger.info(f"        C√≥digo: {pattern['import_code']}")
    else:
        logger.warning("   ‚ö†Ô∏è  No se encontraron patrones de importaci√≥n exitosos")
        logger.info("   üîß Soluciones sugeridas:")
        logger.info("      1. Actualizar google-cloud-retail: pip install --upgrade google-cloud-retail")
        logger.info("      2. Verificar compatibilidad de versiones")
        logger.info("      3. Usar implementaci√≥n alternativa sin ListUserEventsRequest")
    
    # Recomendar implementaci√≥n alternativa
    logger.info("   üîÑ Implementaci√≥n alternativa recomendada:")
    logger.info("      ‚Ä¢ Usar UserEventServiceClient.list_user_events() directamente")
    logger.info("      ‚Ä¢ Construir request usando diccionarios en lugar de clases tipadas")
    logger.info("      ‚Ä¢ Implementar fallback que devuelva lista vac√≠a")

def create_fixed_implementation():
    """Crea un ejemplo de implementaci√≥n corregida."""
    logger.info("üîß Ejemplo de implementaci√≥n corregida:")
    
    fixed_code = '''
async def get_user_events_fixed(self, user_id: str, limit: int = 50) -> List[Dict]:
    """
    Versi√≥n corregida que no depende de ListUserEventsRequest.
    """
    try:
        from google.cloud.retail_v2 import UserEventServiceClient
        
        # Usar el cliente directamente sin clases de request tipadas
        parent = f"projects/{self.project_number}/locations/{self.location}/catalogs/{self.catalog}"
        
        # Crear request como diccionario (m√°s flexible)
        request_dict = {
            "parent": parent,
            "filter": f'visitorId="{user_id}"',
            "page_size": limit
        }
        
        # Intentar llamar al m√©todo usando **kwargs
        try:
            response = self.user_event_client.list_user_events(**request_dict)
            
            events = []
            for event in response.user_events:
                events.append({
                    "event_type": event.event_type,
                    "visitor_id": event.visitor_id,
                    "event_time": event.event_time.isoformat() if event.event_time else None
                })
            
            return events
            
        except Exception as api_error:
            logging.warning(f"API call failed: {api_error}")
            return []
            
    except ImportError:
        logging.warning("UserEventServiceClient not available")
        return []
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        return []
'''
    
    logger.info("   üìù C√≥digo de ejemplo guardado")
    return fixed_code

def main():
    """Funci√≥n principal del script de verificaci√≥n."""
    logger.info("üöÄ Iniciando verificaci√≥n de importaciones de Google Cloud Retail API")
    logger.info("=" * 80)
    
    # 1. Verificar la instalaci√≥n del paquete
    if not check_package_version():
        logger.error("‚ùå No se puede continuar sin el paquete google-cloud-retail")
        sys.exit(1)
    
    logger.info("-" * 80)
    
    # 2. Probar patrones de importaci√≥n
    successful_patterns, failed_patterns = test_import_patterns()
    
    logger.info("-" * 80)
    
    # 3. Listar clases disponibles en m√≥dulos relevantes
    modules_to_check = [
        'google.cloud.retail_v2',
        'google.cloud.retail_v2.types',
        'google.cloud.retail_v2.types.user_event_service',
        'google.cloud.retail_v2.services.user_event_service'
    ]
    
    for module in modules_to_check:
        list_available_classes(module)
    
    logger.info("-" * 80)
    
    # 4. Verificar enfoques alternativos
    check_alternative_approaches()
    
    logger.info("-" * 80)
    
    # 5. Proporcionar recomendaciones
    provide_recommendations(successful_patterns, failed_patterns)
    
    logger.info("-" * 80)
    
    # 6. Crear implementaci√≥n de ejemplo
    create_fixed_implementation()
    
    logger.info("=" * 80)
    logger.info("‚úÖ Verificaci√≥n completada")

if __name__ == "__main__":
    main()