# test_import_fix.py
"""
Test para verificar que el error de ImportError se ha resuelto
"""

def test_import_fix():
    """Verifica que RecommenderFactory se puede importar correctamente"""
    try:
        from src.api.factories import RecommenderFactory
        print("‚úÖ SUCCESS: RecommenderFactory imported successfully")
        print(f"   Type: {type(RecommenderFactory)}")
        
        # Test que tenga los m√©todos esperados
        expected_methods = [
            'create_tfidf_recommender',
            'create_retail_recommender', 
            'create_hybrid_recommender',
            'create_redis_client'
        ]
        
        for method in expected_methods:
            if hasattr(RecommenderFactory, method):
                print(f"   ‚úÖ Method {method}: Available")
            else:
                print(f"   ‚ùå Method {method}: Missing")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå FAILED: ImportError still exists: {e}")
        return False
    except Exception as e:
        print(f"‚ùå FAILED: Unexpected error: {e}")
        return False

def test_new_architecture():
    """Verifica que la nueva arquitectura enterprise tambi√©n funciona"""
    try:
        from src.api.factories import ServiceFactory
        print("‚úÖ SUCCESS: ServiceFactory (enterprise) imported successfully")
        print(f"   Type: {type(ServiceFactory)}")
        
        # Test m√©todos enterprise
        expected_methods = [
            'get_redis_service',
            'create_inventory_service',
            'create_product_cache',
            'health_check_all_services'
        ]
        
        for method in expected_methods:
            if hasattr(ServiceFactory, method):
                print(f"   ‚úÖ Enterprise method {method}: Available")
            else:
                print(f"   ‚ùå Enterprise method {method}: Missing")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå FAILED: Enterprise ServiceFactory import failed: {e}")
        return False

def test_compatibility_layer():
    """Test que el compatibility layer funciona"""
    try:
        from src.api.factories import LEGACY_FACTORIES_AVAILABLE
        print(f"‚úÖ Legacy factories available: {LEGACY_FACTORIES_AVAILABLE}")
        
        if LEGACY_FACTORIES_AVAILABLE:
            from src.api.factories import MCPFactory
            print("‚úÖ MCPFactory also available")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Compatibility layer failed: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Testing Import Fix for Redis Enterprise Architecture")
    print("=" * 60)
    
    results = []
    
    print("\n1Ô∏è‚É£ Testing Legacy RecommenderFactory Import:")
    results.append(test_import_fix())
    
    print("\n2Ô∏è‚É£ Testing Enterprise ServiceFactory:")
    results.append(test_new_architecture())
    
    print("\n3Ô∏è‚É£ Testing Compatibility Layer:")
    results.append(test_compatibility_layer())
    
    print("\n" + "=" * 60)
    success_count = sum(results)
    total_tests = len(results)
    
    if success_count == total_tests:
        print(f"üéâ ALL TESTS PASSED ({success_count}/{total_tests})")
        print("‚úÖ ImportError resolved successfully!")
        print("‚úÖ Enterprise architecture functional!")
        print("‚úÖ Migration path established!")
    else:
        print(f"‚ö†Ô∏è PARTIAL SUCCESS ({success_count}/{total_tests})")
        print("‚ùå Some issues remain - review implementation")
