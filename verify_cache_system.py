
#!/usr/bin/env python
"""
Script de verificaci√≥n para el Sistema de Cach√© H√≠brido con Redis.

Este script realiza una serie de verificaciones para comprobar 
que todos los componentes del sistema de cach√© est√°n correctamente
implementados y configurados.
"""

import os
import sys
import asyncio
import logging
import json
from typing import Dict, Any, List
import time

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def check_redis_connection():
    """Verifica la conexi√≥n a Redis."""
    logger.info("‚è≥ Verificando conexi√≥n a Redis...")
    
    try:
        from src.api.core.redis_client import RedisClient
        
        # Obtener configuraci√≥n
        host = os.getenv("REDIS_HOST", "localhost")
        port = int(os.getenv("REDIS_PORT", "6379"))
        password = os.getenv("REDIS_PASSWORD", "")
        db = int(os.getenv("REDIS_DB", "0"))
        ssl = os.getenv("REDIS_SSL", "False").lower() == "true"
        
        logger.info(f"üìù Configuraci√≥n Redis: {host}:{port}, DB={db}, SSL={ssl}")
        
        # Crear cliente
        client = RedisClient(
            host=host,
            port=port,
            db=db,
            password=password,
            ssl=ssl
        )
        
        # Intentar conectar
        connected = await client.connect()
        
        if connected:
            logger.info("‚úÖ Conexi√≥n a Redis establecida correctamente")
            
            # Realizar prueba simple
            test_key = "test:verification"
            test_value = f"cache_verification_{int(time.time())}"
            
            # Guardar en cach√©
            await client.set(test_key, test_value, ex=60)
            
            # Leer de cach√©
            retrieved = await client.get(test_key)
            
            if retrieved == test_value:
                logger.info("‚úÖ Operaciones b√°sicas (set/get) funcionan correctamente")
            else:
                logger.error(f"‚ùå Error en operaciones b√°sicas. Esperado: '{test_value}', Obtenido: '{retrieved}'")
                return False
                
            # Limpiar
            await client.delete(test_key)
            
            # Obtener informaci√≥n de salud
            health = await client.health_check()
            logger.info(f"üìä Informaci√≥n de salud: {json.dumps(health, indent=2)}")
            
            return True
        else:
            logger.error("‚ùå No se pudo conectar a Redis")
            return False
            
    except ImportError:
        logger.error("‚ùå No se pudo importar RedisClient. Verifica que redis-py est√© instalado")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error verificando conexi√≥n a Redis: {str(e)}")
        logger.exception(e)
        return False

async def check_product_cache():
    """Verifica la implementaci√≥n de ProductCache."""
    logger.info("‚è≥ Verificando implementaci√≥n de ProductCache...")
    
    try:
        from src.api.core.product_cache import ProductCache
        from src.api.core.redis_client import RedisClient
        
        # Crear redis_client m√≠nimo para pruebas
        redis_client = RedisClient(host="localhost")
        
        # Crear ProductCache m√≠nimo
        cache = ProductCache(
            redis_client=redis_client,
            ttl_seconds=3600,
            prefix="test:"
        )
        
        # Verificar m√©todos requeridos
        required_methods = [
            "get_product", 
            "preload_products", 
            "invalidate", 
            "get_stats",
            "_calculate_hit_ratio",
            "_save_to_redis",
            "start_background_tasks"
        ]
        
        for method in required_methods:
            if not hasattr(cache, method):
                logger.error(f"‚ùå ProductCache no tiene el m√©todo requerido: {method}")
                return False
        
        logger.info("‚úÖ ProductCache tiene todos los m√©todos requeridos")
        
        # Verificar estad√≠sticas iniciales
        stats = cache.get_stats()
        if not isinstance(stats, dict) or "hit_ratio" not in stats:
            logger.error(f"‚ùå get_stats() no devuelve un diccionario con 'hit_ratio'")
            return False
            
        logger.info("‚úÖ M√©todo get_stats() funciona correctamente")
        logger.info(f"üìä Estad√≠sticas iniciales: {json.dumps(stats, indent=2)}")
        
        return True
        
    except ImportError:
        logger.error("‚ùå No se pudo importar ProductCache")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error verificando ProductCache: {str(e)}")
        logger.exception(e)
        return False

async def check_hybrid_recommender():
    """Verifica la integraci√≥n con HybridRecommender."""
    logger.info("‚è≥ Verificando integraci√≥n con HybridRecommender...")
    
    try:
        # Importar y verificar si acepta product_cache
        from src.recommenders.hybrid import HybridRecommender
        
        # Verificar si el constructor acepta product_cache
        import inspect
        params = inspect.signature(HybridRecommender.__init__).parameters
        
        if "product_cache" not in params:
            logger.error("‚ùå HybridRecommender.__init__ no acepta el par√°metro product_cache")
            logger.error(f"üìù Par√°metros actuales: {list(params.keys())}")
            return False
            
        logger.info("‚úÖ HybridRecommender acepta el par√°metro product_cache")
        
        # Verificar si tiene m√©todo de enriquecimiento
        if not hasattr(HybridRecommender, "_enrich_recommendations"):
            logger.error("‚ùå HybridRecommender no tiene el m√©todo _enrich_recommendations")
            return False
            
        logger.info("‚úÖ HybridRecommender tiene el m√©todo _enrich_recommendations")
        
        return True
        
    except ImportError:
        logger.error("‚ùå No se pudo importar HybridRecommender")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error verificando HybridRecommender: {str(e)}")
        logger.exception(e)
        return False

async def check_factory_methods():
    """Verifica los m√©todos de f√°brica."""
    logger.info("‚è≥ Verificando m√©todos de f√°brica...")
    
    try:
        from src.api.factories import RecommenderFactory
        
        # Verificar m√©todos requeridos
        required_methods = [
            "create_redis_client",
            "create_product_cache"
        ]
        
        for method in required_methods:
            if not hasattr(RecommenderFactory, method):
                logger.error(f"‚ùå RecommenderFactory no tiene el m√©todo requerido: {method}")
                return False
        
        logger.info("‚úÖ RecommenderFactory tiene todos los m√©todos requeridos")
        
        return True
    
    except ImportError:
        logger.error("‚ùå No se pudo importar RecommenderFactory")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error verificando m√©todos de f√°brica: {str(e)}")
        logger.exception(e)
        return False

async def check_requirements():
    """Verifica que las dependencias necesarias est√©n instaladas."""
    logger.info("‚è≥ Verificando dependencias...")
    
    required_packages = ["redis", "aioredis"]
    
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úÖ Dependencia '{package}' est√° instalada")
        except ImportError:
            logger.error(f"‚ùå Dependencia '{package}' NO est√° instalada")
            return False
    
    return True

async def check_env_file():
    """Verifica que las variables de entorno de Redis est√©n en el archivo .env."""
    logger.info("‚è≥ Verificando archivo .env...")
    
    env_file = ".env"
    if not os.path.exists(env_file):
        logger.warning(f"‚ö†Ô∏è No se encontr√≥ el archivo {env_file}")
        return False
    
    required_vars = [
        "REDIS_HOST",
        "REDIS_PORT",
        "USE_REDIS_CACHE",
        "CACHE_TTL"
    ]
    
    with open(env_file, "r") as f:
        content = f.read()
    
    missing_vars = []
    for var in required_vars:
        if var not in content:
            missing_vars.append(var)
    
    if missing_vars:
        logger.warning(f"‚ö†Ô∏è Variables faltantes en {env_file}: {', '.join(missing_vars)}")
        return False
    
    logger.info(f"‚úÖ Archivo {env_file} contiene las variables necesarias para Redis")
    return True

async def check_health_endpoint():
    """Verifica que el endpoint de health incluye informaci√≥n de cach√©."""
    logger.info("‚è≥ Verificando endpoint de health...")
    
    try:
        # Verificar si el archivo main incluye cach√© en el estado de salud
        with open("src/api/main_tfidf_shopify_with_metrics.py", "r") as f:
            content = f.read()
        
        if "cache_status" not in content or "cache" not in content:
            logger.warning("‚ö†Ô∏è El endpoint de health puede que no incluya informaci√≥n de cach√©")
            return False
        
        # Si encontramos alguna referencia a cach√© en el endpoint de health
        if '"cache"' in content and "components" in content:
            logger.info("‚úÖ El endpoint de health parece incluir informaci√≥n de cach√©")
            return True
            
        logger.warning("‚ö†Ô∏è No se encontr√≥ confirmaci√≥n clara de que el endpoint de health incluya informaci√≥n de cach√©")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Error verificando endpoint de health: {str(e)}")
        return False

async def main():
    """Funci√≥n principal."""
    logger.info("üöÄ Iniciando verificaci√≥n del Sistema de Cach√© H√≠brido con Redis")
    
    results = {}
    
    # Verificar dependencias
    results["requirements"] = await check_requirements()
    
    # Verificar archivo .env
    results["env_file"] = await check_env_file()
    
    # Verificar RedisClient
    results["redis_connection"] = await check_redis_connection()
    
    # Verificar ProductCache
    results["product_cache"] = await check_product_cache()
    
    # Verificar integraci√≥n con HybridRecommender
    results["hybrid_recommender"] = await check_hybrid_recommender()
    
    # Verificar m√©todos de f√°brica
    results["factory_methods"] = await check_factory_methods()
    
    # Verificar endpoint de health
    results["health_endpoint"] = await check_health_endpoint()
    
    # Mostrar resumen
    logger.info("üìã Resumen de verificaci√≥n:")
    
    all_ok = True
    for name, result in results.items():
        status = "‚úÖ OK" if result else "‚ùå ERROR"
        logger.info(f"  {status} - {name}")
        if not result:
            all_ok = False
    
    if all_ok:
        logger.info("üéâ Verificaci√≥n completa: El Sistema de Cach√© H√≠brido con Redis est√° correctamente implementado")
        return 0
    else:
        logger.error("‚ö†Ô∏è Verificaci√≥n completa: Se encontraron problemas en el Sistema de Cach√© H√≠brido con Redis")
        return 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("‚ùå Verificaci√≥n interrumpida")
        sys.exit(130)
    except Exception as e:
        logger.error(f"‚ùå Error durante la verificaci√≥n: {str(e)}")
        logger.exception(e)
        sys.exit(1)
