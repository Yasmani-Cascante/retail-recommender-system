# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import recommendation_service_pb2 as recommendation__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in recommendation_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RecommendationServiceStub(object):
    """Servicio principal de recomendaciones
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetContentBasedRecommendations = channel.unary_unary(
                '/recommendation.RecommendationService/GetContentBasedRecommendations',
                request_serializer=recommendation__service__pb2.ProductRequest.SerializeToString,
                response_deserializer=recommendation__service__pb2.RecommendationsResponse.FromString,
                _registered_method=True)
        self.GetRetailRecommendations = channel.unary_unary(
                '/recommendation.RecommendationService/GetRetailRecommendations',
                request_serializer=recommendation__service__pb2.UserProductRequest.SerializeToString,
                response_deserializer=recommendation__service__pb2.RecommendationsResponse.FromString,
                _registered_method=True)
        self.GetHybridRecommendations = channel.unary_unary(
                '/recommendation.RecommendationService/GetHybridRecommendations',
                request_serializer=recommendation__service__pb2.UserProductRequest.SerializeToString,
                response_deserializer=recommendation__service__pb2.RecommendationsResponse.FromString,
                _registered_method=True)
        self.RecordUserEvent = channel.unary_unary(
                '/recommendation.RecommendationService/RecordUserEvent',
                request_serializer=recommendation__service__pb2.UserEventRequest.SerializeToString,
                response_deserializer=recommendation__service__pb2.StatusResponse.FromString,
                _registered_method=True)


class RecommendationServiceServicer(object):
    """Servicio principal de recomendaciones
    """

    def GetContentBasedRecommendations(self, request, context):
        """Recomendaciones basadas en contenido
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRetailRecommendations(self, request, context):
        """Recomendaciones de Retail API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHybridRecommendations(self, request, context):
        """Recomendaciones híbridas (combinación de content-based y Retail API)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordUserEvent(self, request, context):
        """Registro de eventos de usuario
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecommendationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetContentBasedRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContentBasedRecommendations,
                    request_deserializer=recommendation__service__pb2.ProductRequest.FromString,
                    response_serializer=recommendation__service__pb2.RecommendationsResponse.SerializeToString,
            ),
            'GetRetailRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRetailRecommendations,
                    request_deserializer=recommendation__service__pb2.UserProductRequest.FromString,
                    response_serializer=recommendation__service__pb2.RecommendationsResponse.SerializeToString,
            ),
            'GetHybridRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHybridRecommendations,
                    request_deserializer=recommendation__service__pb2.UserProductRequest.FromString,
                    response_serializer=recommendation__service__pb2.RecommendationsResponse.SerializeToString,
            ),
            'RecordUserEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordUserEvent,
                    request_deserializer=recommendation__service__pb2.UserEventRequest.FromString,
                    response_serializer=recommendation__service__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'recommendation.RecommendationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('recommendation.RecommendationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RecommendationService(object):
    """Servicio principal de recomendaciones
    """

    @staticmethod
    def GetContentBasedRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendation.RecommendationService/GetContentBasedRecommendations',
            recommendation__service__pb2.ProductRequest.SerializeToString,
            recommendation__service__pb2.RecommendationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRetailRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendation.RecommendationService/GetRetailRecommendations',
            recommendation__service__pb2.UserProductRequest.SerializeToString,
            recommendation__service__pb2.RecommendationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHybridRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendation.RecommendationService/GetHybridRecommendations',
            recommendation__service__pb2.UserProductRequest.SerializeToString,
            recommendation__service__pb2.RecommendationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordUserEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/recommendation.RecommendationService/RecordUserEvent',
            recommendation__service__pb2.UserEventRequest.SerializeToString,
            recommendation__service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
